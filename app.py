import json
import logging
import os
import sqlite3
import threading
import time
from datetime import datetime, timedelta
from re import sub
from zoneinfo import ZoneInfo

import configparser as configparser
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import pandas as pd
import psycopg2
import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup

utc = ZoneInfo('UTC')
localtz = ZoneInfo('Asia/Krasnoyarsk')

not_work_sensors = set()
do_work_sensors = set()
work_sensors = set()

config = configparser.ConfigParser()
with open('config.ini', 'r', encoding='utf-8-sig') as f:
    config.read_file(f)

MAX_LINES_PER_MESSAGE = 100
token = config['TG']['token']
title = config['TG']['title']
CHAT_ID = config['TG']['chat_id']
databases = {}

i = 1
while True:
    db_section = f'DB_{i}'

    if db_section not in config:
        break

    databases[i] = {
        'dbname': config[db_section]['dbname'],
        'user': config[db_section]['user'],
        'password': config[db_section]['password'],
        'host': config[db_section]['host'],
        'port': config[db_section]['port']
    }

    i += 1

db_path = "db.sqlite"

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger('StatTG')
logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
fh = logging.FileHandler('log_file.log', encoding='utf-8')
fh.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–æ–≤ –≤ –ª–æ–≥–≥–µ—Ä
logger.addHandler(fh)
logger.addHandler(ch)

logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

bot = telebot.TeleBot(token)
bot.delete_webhook()


def get_all_sensors():
    sensors = []
    for db_num, db in databases.items():
        try:
            conn = psycopg2.connect(
                dbname=db['dbname'],
                user=db['user'],
                password=db['password'],
                host=db['host'],
                port=db['port']
            )
            cursor = conn.cursor()
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ {db_num}")
        try:
            query_params = {
                "name": "SENSOR_INFO",
                "protocol_version": "1.0",
                "mode": "ONE_ROW"
            }

            query = f"SELECT * FROM data_exchange.get_data('{json.dumps(query_params)}')"
            cursor.execute(query)
            sensor_rows = cursor.fetchall()

            for row in sensor_rows:
                rows_data = row[0].get('rows_data')
                if rows_data:
                    for data in rows_data:
                        sensor_dict = {
                            'status': data.get('status'),
                            'name': data.get('name').encode('utf-8'),
                            'projects_name': data.get('projects_name'),
                            'projects_id': data.get('projects_id'),
                            'pvr_last_time': data.get('pvr_last_time'),
                            'adapter_id': data.get('adapter_id')
                            # Add other desired fields here
                        }
                        sensors.append(sensor_dict)

            conn.commit()
            conn.close()
        except Exception:
            raise Exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    return sensors


def stat_sensors(sensors, project, message=None):
    prev_work_sensors = 0
    prev_not_work_sensors = 0
    prev_do_work_sensors = 0
    prev_time = ""

    not_work_sensors.clear()
    do_work_sensors.clear()
    work_sensors.clear()
    count_work_sensors = 0
    count_not_work_sensors = 0
    count_do_work_sensors = 0

    connection = sqlite3.connect(db_path)
    cursor = connection.cursor()

    # Read previous values from the database
    try:
        cursor.execute(
            f"SELECT work, nwork, dowork, create_at AS current_datetime FROM data WHERE project_name = ? ORDER BY create_at DESC LIMIT 1",
            (project,)
        )
        result = cursor.fetchone()
        if result:
            prev_work_sensors = result[0]
            prev_not_work_sensors = result[1]
            prev_do_work_sensors = result[2]
            prev_time = result[3]
    except sqlite3.Error as error:
        print("An error occurred:", error)

    if project == title:
        for sens in sensors:
            status = int(sens['status'])
            if status == 0:
                count_not_work_sensors += 1
                not_work_sensors.add((sens['name'], sens['pvr_last_time'], sens['adapter_id']))
            elif status == 1:
                count_work_sensors += 1
                work_sensors.add((sens['name'], sens['pvr_last_time'], sens['adapter_id']))
            elif status == 2:
                count_do_work_sensors += 1
                do_work_sensors.add((sens['name'], sens['pvr_last_time'], sens['adapter_id']))
    else:
        for sens in sensors:
            if str(sens['projects_id']) == project:
                status = int(sens['status'])
                if status == 0:
                    count_not_work_sensors += 1
                    not_work_sensors.add((sens['name'], sens['pvr_last_time'], sens['adapter_id']))
                elif status == 1:
                    count_work_sensors += 1
                    work_sensors.add((sens['name'], sens['pvr_last_time'], sens['adapter_id']))
                elif status == 2:
                    count_do_work_sensors += 1
                    do_work_sensors.add((sens['name'], sens['pvr_last_time'], sens['adapter_id']))

    try:
        cursor.execute("INSERT INTO data (project_name, work, nwork, dowork, create_at) VALUES (?, ?, ?, ?, ?)",
                       (project, count_work_sensors, count_not_work_sensors, count_do_work_sensors, datetime.now()))
        connection.commit()
    except sqlite3.Error as error:
        print("An error occurred:", error)

    if message:
        list_work_button = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ ‚úÖ", callback_data="list_work_sensors")
        list_not_work_button = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ ‚ùå", callback_data="list_not_work_sensors")
        list_do_work_button = InlineKeyboardButton("–°–ø–∏—Å–æ–∫ ‚ö†Ô∏è", callback_data="list_do_work_sensors")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(
            message.chat.id,
            f"{project}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {prev_time}\n"
            f"‚úÖ –†–∞–±–æ—á–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤: {count_work_sensors} ({'+' + str(count_work_sensors - prev_work_sensors) if count_work_sensors - prev_work_sensors > 0 else count_work_sensors - prev_work_sensors})\n"
            f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤: {count_not_work_sensors} ({'+' + str(count_not_work_sensors - prev_not_work_sensors) if count_not_work_sensors - prev_not_work_sensors > 0 else count_not_work_sensors - prev_not_work_sensors})\n"
            f"‚ö†Ô∏è –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: {count_do_work_sensors} ({'+' + str(count_do_work_sensors - prev_do_work_sensors) if count_do_work_sensors - prev_do_work_sensors > 0 else count_do_work_sensors - prev_do_work_sensors})\n",
            reply_to_message_id=message.message_id,
            disable_notification=True,
            reply_markup=InlineKeyboardMarkup([[list_work_button, list_not_work_button, list_do_work_button]])
        )

    cursor.close()
    connection.close()


def display_sensor_list(call, sensors):
    if not sensors:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞—Ç—á–∏–∫–æ–≤.")
    else:
        sensors_sorted = sorted(list(sensors))
        match call.data:
            case "list_work_sensors":
                text = "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤:\n"
            case "list_not_work_sensors":
                text = "–°–ø–∏—Å–æ–∫ –Ω–µ—Ä–∞–±–æ—á–∏—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤:\n"
            case "list_do_work_sensors":
                text = "–°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:\n"
        current_lines = 0

        for idx, (sensor, pvr_last_time, adapter_id) in enumerate(sensors_sorted, 1):
            sensor_str = sensor.decode('UTF-8')
            utctime = datetime.strptime(pvr_last_time, '%Y-%m-%dT%H:%M:%S.%f%z')
            localtime = utctime.astimezone(localtz)
            lines_needed = (len(sensor_str) + len(pvr_last_time) + 6) // 50 + 1  # Additional lines for formatting

            if current_lines + lines_needed <= MAX_LINES_PER_MESSAGE:
                text += f"{idx}. {sensor_str}\nPVR: {localtime.strftime('%Y-%m-%d %H:%M')}\n"
                current_lines += lines_needed
            else:
                bot.send_message(call.message.chat.id, text)
                text = f"{idx}. {sensor_str}\nPVR: {localtime.strftime('%Y-%m-%d %H:%M')}\n"
                current_lines = lines_needed

        if text.strip():  # If there's remaining content in 'text', send the last message.
            bot.send_message(call.message.chat.id, text)
            # bot.send_message(call.message.chat.id, "–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.")
            # bot.register_next_step_handler(call.message, lambda message: ssh_detect(message, sensors_sorted))
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üî¢ –î–∞–Ω–Ω—ã–µ'), types.KeyboardButton('üìä –ì—Ä–∞—Ñ–∏–∫'))
    bot.send_message(message.chat.id,
             '–î–∞–Ω–Ω—ã–µ - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç—á–∏–∫–∞—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏\n'
             '–ì—Ä–∞—Ñ–∏–∫ - –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞ —Å—É—Ç–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤', reply_markup=keyboard)

def clean_text(text):
    cleaned_text = sub(r'[^\w\s]', '', text)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    cleaned_text = sub(r'\s+', '_', cleaned_text)  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    return cleaned_text.lower()[:24]

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == 'üî¢ –î–∞–Ω–Ω—ã–µ':
        try:
            sensors = get_all_sensors()
            stat_sensors(sensors, title, message)
        except Exception as e:
            bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {title}")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ {title}: {e}")
    if message.text == 'üìä –ì—Ä–∞—Ñ–∏–∫':
        connection = sqlite3.connect(db_path)
        cursor = connection.cursor()
        try:
            now = datetime.now()
            start_time = now - timedelta(days=1)
            cursor.execute(
                f"SELECT work, nwork, dowork, create_at AS current_datetime FROM data WHERE project_name =? AND create_at >=?",
                (title, start_time))
            data = cursor.fetchall()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ work, nwork –∏ dowork
            work_values = [row[0] for row in data]
            nwork_values = [row[1] for row in data]
            dowork_values = [row[2] for row in data]

            # Convert the 'create_at' field from string to datetime objects
            timestamps = [datetime.strptime(row[3], '%Y-%m-%d %H:%M:%S.%f') for row in data]

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, ax = plt.subplots(figsize=(10, 5))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –¥–ª—è work
            ax.plot(timestamps, work_values, color='green', label='–†–∞–±–æ—á–∏–µ –¥–∞—Ç—á–∏–∫–∏')

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –¥–ª—è nwork
            ax.plot(timestamps, nwork_values, color='red', label='–ù–µ—Ä–∞–±–æ—á–∏–µ –¥–∞—Ç—á–∏–∫–∏')

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –¥–ª—è dowork
            ax.plot(timestamps, dowork_values, color='yellow', label='–° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º')

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
            ax.legend()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            ax.xaxis.set_major_locator(mdates.HourLocator(interval=1))
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
            ax.set_xticks(pd.date_range(start=start_time, end=now, freq='H'))
            ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
            ax.grid(True)
            ax.set_xlabel('–í—Ä–µ–º—è')
            ax.set_ylabel('–î–∞—Ç—á–∏–∫–∏')
            ax.set_title('–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–æ–≤ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏')

            ax.yaxis.set_major_locator(plt.MaxNLocator(20))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plt.savefig(f'graph{message.id}.png', dpi=300, bbox_inches='tight')
        except sqlite3.Error as error:
            print("An error occurred:", error)
        with open(f'graph{message.id}.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo, timeout=100)

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        cursor.close()
        connection.close()
        os.remove(f'graph{message.id}.png')

@bot.callback_query_handler(func=lambda call: call.data == "list_work_sensors")
def list_work_sensors_callback(call):
    display_sensor_list(call, work_sensors)

@bot.callback_query_handler(func=lambda call: call.data == "list_not_work_sensors")
def list_not_work_sensors_callback(call):
    display_sensor_list(call, not_work_sensors)

@bot.callback_query_handler(func=lambda call: call.data == "list_do_work_sensors")
def list_do_work_sensors_callback(call):
    display_sensor_list(call, do_work_sensors)

def execute_commands():
    while True:
        try:
            # –í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
            sensors = get_all_sensors()
            stat_sensors(sensors, title)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ {title}: {e}")

        # –ü–∞—É–∑–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞—Å–∞
        time.sleep(3600)  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å

try:
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∫–∞–∂–¥—ã–π —á–∞—Å
    thread = threading.Thread(target=execute_commands)
    thread.start()

    bot.polling(none_stop=True)
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞: {e}")
    time.sleep(5)
